
=pod

=head1 Moo(se)? Benchmarks

Welcome to the L<Moose>/L<Moo> benchmarks!  If you have any thoughts you'd like to
share you can open up a
L<GitHub issue|https://github.com/bluefeet/Moo-se-Bench/issues> or comment on
the L<blog post|http://blog.bluefeet.net/post/124956302724/moose-performance>.

These benchmarks were run on a Mid 2012 MacBook Pro, perlbrew Perl 5.20, Moo
v2.000001, Moose v2.1405, and Type::Tiny v1.000005, among other specifics.

Your mileage may vary.

=head2 Loading

We all know Moose is a bit slow at compile time.  A very basic test comparing
C<use Moose;> versus C<use Moo;> illustrates this:

            Rate Moose   Moo  Perl
    Moose 5.12/s    --  -90%  -99%
    Moo   51.3/s  901%    --  -89%
    Perl   476/s 9195%  829%    --

Moo use is 10x faster than Moose just getting the core modules loaded.
Although, compared to just loading perl they both add a lot of overhead. Now
let's look at the compile-time when we include a basic class with a few
attributes as part of the compile:

          Rate    Moose Moo
    Moose 5.03/s    --  -84%
    Moo   31.5/s  527%    --

The Moose timing barely changes here, but Moo gets quite a bit slower yet still
beats out Moose by a large margin.

=head2 Instantiating

As OO seems to have soaked into most everything Perl nowadays, and people are
making objects at very granular levels, it has become important to be able to
create objects quickly.

                       Rate Moose_Default Moose_NoInit Moose_Basic Moo_Default Moo_NoInit Moo_Basic
    Moose_Default   16496/s            --         -16%        -30%        -97%       -98%      -99%
    Moose_NoInit    19670/s           19%           --        -16%        -96%       -97%      -98%
    Moose_Basic     23552/s           43%          20%          --        -95%       -97%      -98%
    Moo_Default    490196/s         2872%        2392%       1981%          --       -31%      -58%
    Moo_NoInit     714286/s         4230%        3531%       2933%         46%         --      -39%
    Moo_Basic     1162791/s         6949%        5812%       4837%        137%        63%        --

The Basic benchmarks are using a class with an attribute which does not have a
default, the Default benchmarks are using a class with an attribute which does
have a default, and the NoInit benchmarks are using a class with an attribute
which has init_arg set to undef.

As we can see Moo kicks Moose's ass in this benchmark, being able to churn out
objects many times faster.  In both Moo and Moose's case having an attribute
with a default dramatically slows them down.

Oddly, contrary to what one would have expected, setting init_arg to undef makes
both Moo and Moose slower.

=head2 Defaults

In both Moo and Moose there are two ways to set defaults 1) via the C<default>
attribute argument, and 2) via a lazy builder.  Defaults are simple and cannot
derive a value from the object that is using it.  Lazy builders on the other
hand have a lot more flexibility and let you delay the logic which defines the
default until the attribute is actually used.  Here's a comparison of defaults
versus lazy builders:

                          Rate New_Moose_Default New_Moose_None New_Moose_Lazy New_Moo_Lazy New_Moo_Default New_Moo_None
    New_Moose_Default  16750/s                --           -15%           -17%         -95%            -95%         -96%
    New_Moose_None     19771/s               18%             --            -2%         -94%            -95%         -96%
    New_Moose_Lazy     20194/s               21%             2%             --         -94%            -95%         -96%
    New_Moo_Lazy      342466/s             1945%          1632%          1596%           --             -8%         -28%
    New_Moo_Default   370370/s             2111%          1773%          1734%           8%              --         -22%
    New_Moo_None      476190/s             2743%          2309%          2258%          39%             29%           --

The above benchmark creates a new object and retrieves the value from the
object.  So the measurement here is a padded with the time it takes to
instantiate an object, so take it with a grain of salt.

This one is a bit more interesting:

                                Rate Existing_Moo_Lazy Existing_Moose_Lazy Existing_Moose_None Existing_Moose_Default Existing_Moo_Default Existing_Moo_None
    Existing_Moo_Lazy      2222222/s                --                 -1%                -26%                   -27%                 -28%              -28%
    Existing_Moose_Lazy    2252252/s                1%                  --                -25%                   -26%                 -27%              -27%
    Existing_Moose_None    3012048/s               36%                 34%                  --                    -1%                  -2%               -3%
    Existing_Moose_Default 3030303/s               36%                 35%                  1%                     --                  -1%               -2%
    Existing_Moo_Default   3067485/s               38%                 36%                  2%                     1%                   --               -1%
    Existing_Moo_None      3105590/s               40%                 38%                  3%                     2%                   1%                --

The above is using an existing object and accessing the value.  This tells us
that defaults are much faster than lazy attributes when accessed multiple times
on the same object.  This should raise your eyebrows because a naive assumption
would be that once a lazy built attribute is accessed the first time, and is
built, its performance would not be degraded.  This is not entirely the case,
and is because whenever the attribute is read it has to check whether the
attribute's value exists and, if it doesn't, build it.

The difference between Moo and Moose in the above benchmark is mostly
inconsequential.

Now lets look at the time it takes to assign a lazy built attribute's value:

                             Rate Clear_Moose_Lazy Clear_Moo_Lazy Clear_Moo_Default Clear_Moose_Default Clear_Moose_None Clear_Moo_None
    Clear_Moose_Lazy     865052/s               --            -3%              -47%                -47%             -49%           -50%
    Clear_Moo_Lazy       891266/s               3%             --              -45%                -45%             -47%           -48%
    Clear_Moo_Default   1618123/s              87%            82%                --                 -1%              -5%            -6%
    Clear_Moose_Default 1633987/s              89%            83%                1%                  --              -4%            -5%
    Clear_Moose_None    1694915/s              96%            90%                5%                  4%               --            -2%
    Clear_Moo_None      1724138/s              99%            93%                7%                  6%               2%             --

So, what this is doing is its using an existing object, as in the last
benchmark, but it clears the attribute value before retrieving it.  This causes
lazy-built attributes to re-build themselves, and thus illustrating the
performance of querying a lazy built attribute the first time.

Again, we're seeing a clear winner: defaults are way faster than lazy builders.
Moo or Moose makes little difference.

=head2 Getting

Retrieving a value from an attribute:

               Rate   Moo Moose
    Moo   2857143/s    --   -0%
    Moose 2857143/s    0%    --

Not much to say here.

=head2 Setting

When writing values things get more interesting:

                              Rate Moo_MooseLike Moo_TypeTiny Moose_CoreValidation Moose_TypeTiny Moo_NoValidation Moose_NoValidation
    Moo_MooseLike         269542/s            --         -20%                 -82%           -83%             -89%               -90%
    Moo_TypeTiny          338983/s           26%           --                 -78%           -79%             -87%               -88%
    Moose_CoreValidation 1515152/s          462%         347%                   --            -7%             -40%               -45%
    Moose_TypeTiny       1626016/s          503%         380%                   7%             --             -36%               -41%
    Moo_NoValidation     2531646/s          839%         647%                  67%            56%               --                -9%
    Moose_NoValidation   2777778/s          931%         719%                  83%            71%              10%                 --

Of course, with writing, you have to take into account validation.  Overall, as
expected, validation slows things down quite a bit.

Moose is measurably faster then Moo when writing raw values.  Once you have
validation though, Moose just completely destroys Moo.  Unexpectedly, Moose
with L<Type::Tiny> validation is actually slightly faster than using Moose's
own validation.

=head2 Conclusion

In many cases Moo and Moose perform relatively equally.  In some cases one
outperforms the other.

For compile-time speed Moo is the clear winner, by a large margin.  This may
matter for scripts where Moose adding 1/5 of a second or more to the script
startup time isn't palatable.

Moo also clearly wins on object creation which can be very important for
transient applications with lots of objects which are rapidly built and
destroyed.

Moose blows Moo away when writing to attributes, especially when validation is
involved.

=head2 Recommendations

Remember, these recommendations are about performance.  There are many
different factors other than performance which you should consider when
writing code and choosing the libraries you are going to use.

=over

=item *

Use Moo if you are creating lots of objects.

=item *

Use Moose if you are setting a lot of attributes.

=item *

Use defaults if you do not need the features provided by lazy builders.

=item *

Avoid validation, it can be really heavy.  For example, don't use validation
for attributes where you trust the source of the value, such as lazy built
attributes with an undef init_arg.

=item *

Avoid setting an undef init_arg as it has a decent performance impact.  Use it
when you don't trust the caller and need the extra safety check.

=item *

If you are doing a lot of validation Moose may be a better choice.

=item *

Use L<Type::Tiny> for your validation, whether you are using Moo or Moose.
Conversely, don't use L<Moox::Types::MooseLike> (and most likely the
rest of the C<MooX::Types::> modules) as it is a hog in comparison to
Type::Tiny.

=item *

You should always benchmark things yourself and see what performs best.
You'll be surprised by what you find.  One of the best tools for finding
your performance bottlenecks is L<Devel::NYTProf>.

=back

=head2 TODO

There are some more things which could be benchmarked, such as:

=over

=item *

Creating classes at run-time.

=item *

Applying roles to classes.

=item *

Method proxying via the C<handles> attribute argument.

=item *

Coercion.

=item *

Method modifiers.

=item *

Time-sequence chart showing performance from version-to-version of the
libraries, to see if they are getting faster/slower over time.

=item *

Benchmark on different versions of Perl.  For example, 5.22 may have
a different performance profile than 5.20 due to the COW changes.

=back

=head1 ACKNOWLEDGEMENTS

Thanks to L<ZipRecruiter|https://www.ziprecruiter.com/>
for encouraging their employees to contribute back to the open
source ecosystem.  Without their dedication to quality software
development this distribution would not exist.

=head1 LICENSE

This document and supporting software is free; you can redistribute
it and/or modify it under the same terms as Perl itself.

=cut

